{
  "service": {
    "service": "lambda-skeleton-circleci",
    "serviceObject": {
      "name": "lambda-skeleton-circleci"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs14.x",
      "region": "ap-southeast-2",
      "stage": "tim",
      "logRetentionInDays": 14,
      "memorySize": 256,
      "timeout": 30,
      "versionFunctions": false,
      "environment": {
        "REGION": "ap-southeast-2",
        "STAGE": "tim",
        "ENV": "dev",
        "EXAMPLE_ENV_VARIABLE": "5"
      },
      "vpc": {
        "securityGroupIds": [
          {
            "Ref": "LambdaSecurityGroup"
          }
        ],
        "subnetIds": [
          "subnet-0a99f793a4c5b8b94",
          "subnet-01847fd3b14f15a29",
          "subnet-000b9eec9f5c1ec1f"
        ]
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject"
          ],
          "Resource": {
            "Fn::Join": [
              "",
              [
                "arn:aws:s3:::",
                "lamda-skeleton-example-tim",
                "/*"
              ]
            ]
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "ssm:GetParameter",
            "ssm:GetParameters",
            "ssm:PutParameters",
            "ssm:PutParameter"
          ],
          "Resource": [
            "*"
          ]
        }
      ],
      "variableSyntax": "\\${([^{}:]+?(?:\\(|:)(?:[^:{}][^{}]*?)?)}",
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "CHANGE ME! This is a description for CloudFormation stack deployed by this Serverless project",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "ExampleHttpLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tim-lambda-skeleton-circleci-exampleHttp",
              "RetentionInDays": 14
            }
          },
          "ExampleStepLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tim-lambda-skeleton-circleci-exampleStep",
              "RetentionInDays": 14
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "lambda-skeleton-circleci",
                        "tim",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tim-lambda-skeleton-circleci-exampleHttp:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tim-lambda-skeleton-circleci-exampleStep:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tim-lambda-skeleton-circleci-exampleHttp:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tim-lambda-skeleton-circleci-exampleStep:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": "tim-lambda-skeleton-circleci-lambda",
              "ManagedPolicyArns": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                    ]
                  ]
                }
              ]
            }
          },
          "ExampleHttpLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lambda-skeleton-circleci/tim/1649309185729-2022-04-07T05:26:25.729Z/exampleHttp.zip"
              },
              "Handler": "src/functions/exampleHttpFunction.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "tim-lambda-skeleton-circleci-exampleHttp",
              "MemorySize": 128,
              "Timeout": 15,
              "Description": "Example lambda that will do nothing",
              "Environment": {
                "Variables": {
                  "REGION": "ap-southeast-2",
                  "STAGE": "tim",
                  "ENV": "dev",
                  "EXAMPLE_ENV_VARIABLE": "5"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "ExampleHttpLogGroup"
            ]
          },
          "ExampleStepLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lambda-skeleton-circleci/tim/1649309185729-2022-04-07T05:26:25.729Z/exampleStep.zip"
              },
              "Handler": "src/functions/exampleStepFunction.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "tim-lambda-skeleton-circleci-exampleStep",
              "MemorySize": 128,
              "Timeout": 15,
              "Description": "Example lambda that will do nothing",
              "Environment": {
                "Variables": {
                  "REGION": "ap-southeast-2",
                  "STAGE": "tim",
                  "ENV": "dev",
                  "EXAMPLE_ENV_VARIABLE": "5"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "ExampleStepLogGroup"
            ]
          },
          "StateMachineExampleRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "states.ap-southeast-2.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "tim-ap-southeast-2-lambda-skeleton-circleci-statemachine",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "lambda:InvokeFunction"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "ExampleStepLambdaFunction",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::Sub": [
                              "${functionArn}:*",
                              {
                                "functionArn": {
                                  "Fn::GetAtt": [
                                    "ExampleStepLambdaFunction",
                                    "Arn"
                                  ]
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "StateMachineExample": {
            "Type": "AWS::StepFunctions::StateMachine",
            "Properties": {
              "DefinitionString": {
                "Fn::Sub": [
                  "{\n  \"Comment\": \"Example\",\n  \"StartAt\": \"Example\",\n  \"States\": {\n    \"Example\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${2007855d0f1c403c4a7f403c2427287c}\",\n      \"End\": true\n    }\n  }\n}",
                  {
                    "2007855d0f1c403c4a7f403c2427287c": {
                      "Fn::GetAtt": [
                        "ExampleStepLambdaFunction",
                        "Arn"
                      ]
                    }
                  }
                ]
              },
              "RoleArn": {
                "Fn::GetAtt": [
                  "StateMachineExampleRole",
                  "Arn"
                ]
              },
              "StateMachineName": "tim-lambda-skeleton-circleci-example"
            },
            "DependsOn": [
              "StateMachineExampleRole"
            ]
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "tim-lambda-skeleton-circleci",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceExample": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "example",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceExampleProxyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceExample"
              },
              "PathPart": "{proxy+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodExampleOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceExample"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodExampleProxyVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceExampleProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodExampleAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceExample"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ExampleHttpLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodExampleProxyVarAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceExampleProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ExampleHttpLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1649309164741": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "tim"
            },
            "DependsOn": [
              "ApiGatewayMethodExampleOptions",
              "ApiGatewayMethodExampleProxyVarOptions",
              "ApiGatewayMethodExampleAny",
              "ApiGatewayMethodExampleProxyVarAny"
            ]
          },
          "ExampleHttpLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ExampleHttpLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LambdaSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "GroupDescription": "Allow lambda the lambda to send http/s requests to api.manage",
              "VpcId": "vpc-070c1c887564eb3dd",
              "SecurityGroupEgress": [
                {
                  "IpProtocol": "tcp",
                  "FromPort": 80,
                  "ToPort": 80,
                  "CidrIp": "0.0.0.0/0"
                },
                {
                  "IpProtocol": "tcp",
                  "FromPort": 443,
                  "ToPort": 443,
                  "CidrIp": "0.0.0.0/0"
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "StateMachineExampleArn": {
            "Description": "Current StateMachine Arn",
            "Value": {
              "Ref": "StateMachineExample"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/tim"
                ]
              ]
            }
          }
        },
        "Conditions": {
          "IsMaster": {
            "Fn::Equals": [
              "tim",
              "master"
            ]
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      }
    },
    "custom": {
      "webpack": {
        "includeModules": {
          "forceInclude": [
            "babel-runtime"
          ]
        }
      },
      "InfrastructurePath": "/tim/infrastructure",
      "InfrastructureFallbackPath": "/master/infrastructure",
      "ServicesPath": "/tim/services",
      "ServicesFallbackPath": "/master/services",
      "VpcId": "vpc-070c1c887564eb3dd",
      "StepFunctionNamePrefix": "tim-lambda-skeleton-circleci",
      "LamdbaFunctionArnPrefix": "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:",
      "ExampleHttpFunctionName": "tim-lambda-skeleton-circleci-exampleHttp",
      "ExampleStepFunctionName": "tim-lambda-skeleton-circleci-exampleStep",
      "ExampleStepFunctionArn": "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:tim-lambda-skeleton-circleci-exampleStep",
      "ExampleBucketName": "lamda-skeleton-example-tim",
      "LogRetentionDays": {
        "master": 3653,
        "other": 14
      },
      "SSMParameterExample": {
        "Type": "AWS::SSM::Parameter",
        "Properties": {
          "Name": "/tim/services/skeleton/test",
          "Type": "String",
          "Value": "testValue"
        }
      }
    },
    "plugins": [
      "serverless-webpack",
      "serverless-step-functions",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "exampleHttp": {
        "name": "tim-lambda-skeleton-circleci-exampleHttp",
        "handler": "src/functions/exampleHttpFunction.handler",
        "description": "Example lambda that will do nothing",
        "timeout": 15,
        "memorySize": 128,
        "events": [
          {
            "http": {
              "integration": "AWS_PROXY",
              "method": "any",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "ANY"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "private": false,
              "path": "example"
            }
          },
          {
            "http": {
              "integration": "AWS_PROXY",
              "method": "any",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "ANY"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "private": false,
              "path": "example/{proxy+}"
            }
          }
        ],
        "package": {
          "artifact": ".serverless/exampleHttp.zip"
        },
        "memory": 128,
        "runtime": "nodejs14.x",
        "vpc": {}
      },
      "exampleStep": {
        "name": "tim-lambda-skeleton-circleci-exampleStep",
        "handler": "src/functions/exampleStepFunction.handler",
        "description": "Example lambda that will do nothing",
        "timeout": 15,
        "memorySize": 128,
        "events": [],
        "package": {
          "artifact": ".serverless/exampleStep.zip"
        },
        "memory": 128,
        "runtime": "nodejs14.x",
        "vpc": {}
      }
    },
    "resources": {
      "Description": "CHANGE ME! This is a description for CloudFormation stack deployed by this Serverless project",
      "Conditions": {
        "IsMaster": {
          "Fn::Equals": [
            "tim",
            "master"
          ]
        }
      },
      "Resources": {
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "tim-lambda-skeleton-circleci-lambda"
          }
        },
        "LambdaSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
            "GroupDescription": "Allow lambda the lambda to send http/s requests to api.manage",
            "VpcId": "vpc-070c1c887564eb3dd",
            "SecurityGroupEgress": [
              {
                "IpProtocol": "tcp",
                "FromPort": 80,
                "ToPort": 80,
                "CidrIp": "0.0.0.0/0"
              },
              {
                "IpProtocol": "tcp",
                "FromPort": 443,
                "ToPort": 443,
                "CidrIp": "0.0.0.0/0"
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "layers": {},
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "package": {
        "individually": true,
        "artifactDirectoryName": "serverless/lambda-skeleton-circleci/tim/1649309185729-2022-04-07T05:26:25.729Z"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "genericPublicLambdaEvent": {
        "integration": "lambda-proxy",
        "method": "ANY",
        "cors": true,
        "private": false
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "stepFunctions": {
        "stateMachines": {
          "exampleStateMachine": {
            "id": "StateMachineExample",
            "name": "tim-lambda-skeleton-circleci-example",
            "definition": {
              "Comment": "Example",
              "StartAt": "Example",
              "States": {
                "Example": {
                  "Type": "Task",
                  "Resource": {
                    "Fn::GetAtt": [
                      "exampleStep",
                      "Arn"
                    ]
                  },
                  "End": true
                }
              }
            }
          }
        }
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "isDashboardMonitoringPreconfigured": false,
    "stepFunctions": {
      "stateMachines": {
        "exampleStateMachine": {
          "id": "StateMachineExample",
          "name": "tim-lambda-skeleton-circleci-example",
          "definition": {
            "Comment": "Example",
            "StartAt": "Example",
            "States": {
              "Example": {
                "Type": "Task",
                "Resource": "${2007855d0f1c403c4a7f403c2427287c}",
                "End": true
              }
            }
          }
        }
      },
      "activities": []
    }
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/lambda-skeleton-circleci/tim/1649309185729-2022-04-07T05:26:25.729Z",
    "artifact": ""
  }
}